version: "3"

vars:
  BUNDLE_ID: com.radiosilence.browser-schedule

tasks:
  build:
    desc: Build the Swift application with TOML support
    silent: true
    cmds:
      - swift build -c release
      - cp .build/release/BrowserSchedule browser-schedule-swift
    sources:
      - Sources/**/*.swift
      - Package.swift
    generates:
      - browser-schedule-swift

  test:
    desc: Run all unit tests
    silent: true
    cmds:
      - swift test

  test-verbose:
    desc: Run unit tests with verbose output
    silent: true
    cmds:
      - swift test --verbose

  test-app:
    desc: Test the application with a URL
    silent: true
    deps: [build, setup-config]
    cmds:
      - ./browser-schedule-swift http://test.com

  test-work:
    desc: Test during work hours (simulate by checking current time)
    silent: true
    deps: [build, setup-config]
    cmds:
      - ./browser-schedule-swift http://test-work.com

  test-all:
    desc: Run both unit tests and application tests
    silent: true
    cmds:
      - task: test
      - task: test-app

  test-coverage:
    desc: Run tests with code coverage
    silent: true
    cmds:
      - swift test --enable-code-coverage
      - |
        if command -v xcov >/dev/null 2>&1; then
          echo "Generating coverage report with xcov..."
          xcov --scheme BrowserSchedule-Package --output_directory coverage_report
        else
          echo "Coverage data collected. Install xcov for HTML reports: gem install xcov"
        fi

  install:
    desc: Install the app bundle as default browser
    silent: true
    deps: [build, create-app-bundle, setup-config]
    cmds:
      - task: create-app-bundle
      - rm -rf /Applications/BrowserSchedule.app
      - cp -R ./build/BrowserSchedule.app /Applications/
      - /Applications/BrowserSchedule.app/Contents/MacOS/browser-schedule --set-default

  update:
    desc: Update the app bundle with current config
    silent: true
    deps: [build]
    cmds:
      - task: create-app-bundle
      - rm -rf /Applications/BrowserSchedule.app
      - cp -R ./build/BrowserSchedule.app /Applications/

  setup-config:
    desc: Create config directory and default config
    internal: true
    silent: true
    cmds:
      - mkdir -p ~/.config/browser-schedule
      - |
        if [ ! -f ~/.config/browser-schedule/config.toml ]; then
          cat > ~/.config/browser-schedule/config.toml << 'EOF'
        [browsers]
        work = "Google Chrome"
        personal = "Zen"

        [urls]
        personal = ["reddit.com"]
        work = ["mycompany.atlassian.net"]

        [work_time]
        start = "9:00"
        end = "18:00"

        [work_days]
        start = "Mon"
        end = "Fri"
        EOF
        fi
      - |
        cat > ~/.config/browser-schedule/.gitignore << 'EOF'
        *.log
        config.local.toml
        EOF

  uninstall:
    desc: Remove the app bundle and reset default browser
    silent: true
    cmds:
      - rm -rf /Applications/BrowserSchedule.app
      - echo "App removed. To reset default browser, go to System Settings > General > Default web browser"
      - open "x-apple.systempreferences:com.apple.preference.dock"

  status:
    desc: Show current status
    silent: true
    cmds:
      - |
        if [ -d "/Applications/BrowserSchedule.app" ]; then
          echo "Status: Installed"
          # Check if registered as URL handler using Launch Services preferences
          if defaults read com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers | grep -A 2 "{{.BUNDLE_ID}}" | grep -q "http"; then
            echo "  Default browser: ✓ Registered for HTTP URLs"
          else
            echo "  Default browser: ✗ Not registered as URL handler"
          fi
        else
          echo "Status: Not installed"
        fi

  clean:
    desc: Clean build artifacts and dependencies
    silent: true
    cmds:
      - rm -f browser-schedule-swift
      - rm -rf build
      - rm -rf coverage_report
      - swift package clean

  logs:
    desc: Show recent logs from unified logging (last 30 minutes)
    silent: true
    cmds:
      - log show --predicate 'subsystem == "{{.BUNDLE_ID}}"' --last 30m --style compact --info --debug

  logs-realtime:
    desc: Stream real-time logs from unified logging
    silent: true
    cmds:
      - log stream --predicate 'subsystem == "{{.BUNDLE_ID}}"' --level debug

  logs-all:
    desc: Show all logs from unified logging (last 24 hours)
    silent: true
    cmds:
      - log show --predicate 'subsystem == "{{.BUNDLE_ID}}"' --last 1d --style compact --info --debug

  config:
    desc: Show current config
    deps: [build]
    silent: true
    cmds:
      - ./browser-schedule-swift --config

  build-dmg:
    desc: Build DMG with BrowserSchedule.app
    silent: true
    deps: [clean, build, setup-config]
    cmds:
      - mkdir -p ./build
      - rm -rf ./build/BrowserSchedule.app
      - task: create-app-bundle
      - rm -f ./build/BrowserSchedule.dmg
      - hdiutil create -volname "BrowserSchedule" -srcfolder ./build/BrowserSchedule.app -ov -format UDZO ./build/BrowserSchedule.dmg

  create-app-bundle:
    desc: Create app bundle in build directory
    internal: true
    silent: true
    deps: [build]
    cmds:
      - mkdir -p ./build/BrowserSchedule.app/Contents/MacOS
      - |
        cat > ./build/BrowserSchedule.app/Contents/Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
        	<key>CFBundleExecutable</key>
        	<string>browser-schedule</string>
        	<key>CFBundleIdentifier</key>
        	<string>{{.BUNDLE_ID}}</string>
        	<key>CFBundleName</key>
        	<string>BrowserSchedule</string>
        	<key>CFBundleVersion</key>
        	<string>1.0</string>
        	<key>CFBundlePackageType</key>
        	<string>APPL</string>
        	<key>LSUIElement</key>
        	<true/>
        	<key>CFBundleURLTypes</key>
        	<array>
        		<dict>
        			<key>CFBundleURLName</key>
        			<string>Web site URL</string>
        			<key>CFBundleURLSchemes</key>
        			<array>
        				<string>http</string>
        				<string>https</string>
        			</array>
        			<key>LSHandlerRank</key>
        			<string>Owner</string>
        		</dict>
        	</array>
        </dict>
        </plist>
        EOF
      - cp browser-schedule-swift ./build/BrowserSchedule.app/Contents/MacOS/browser-schedule
      - chmod +x ./build/BrowserSchedule.app/Contents/MacOS/browser-schedule

  release:
    desc: "Create and push a semantic version release (usage: task release -- major|minor|patch)"
    silent: true
    cmds:
      - |
        CLI_ARGS="{{.CLI_ARGS}}"
        VERSION_TYPE=$(echo "$CLI_ARGS" | awk '{print $1}')
        VERSION_TYPE="${VERSION_TYPE:-patch}"
        CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

        if [ -z "$CURRENT_TAG" ]; then
          CURRENT_VERSION="0.0.0"
        else
          CURRENT_VERSION=$(echo "$CURRENT_TAG" | sed 's/^v//')
        fi

        echo "Current version: $CURRENT_VERSION"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

        # Ensure components are numbers
        MAJOR=${MAJOR:-0}
        MINOR=${MINOR:-0}
        PATCH=${PATCH:-0}

        case "$VERSION_TYPE" in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
          *)
            echo "Usage: task release -- major|minor|patch"
            exit 1
            ;;
        esac

        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        NEW_TAG="v$NEW_VERSION"

        echo "Creating release $NEW_TAG (was v$CURRENT_VERSION)"

        # Create and push tag
        git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
        git push origin "$NEW_TAG"

        echo "Release $NEW_TAG created and pushed!"
        echo "GitHub Actions will build and create the release automatically."
